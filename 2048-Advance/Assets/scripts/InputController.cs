//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/scripts/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""main"",
            ""id"": ""e1d10ff4-0dcf-4519-84a3-949fd17a4dda"",
            ""actions"": [
                {
                    ""name"": ""press"",
                    ""type"": ""Button"",
                    ""id"": ""f6ba4fcf-61cb-43c4-b906-83b04bc8c2b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""release"",
                    ""type"": ""Button"",
                    ""id"": ""e4c1bfc8-94c0-49ed-806b-60cf6dbd9990"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""posMouse"",
                    ""type"": ""Value"",
                    ""id"": ""2d61a54e-b671-460b-81a5-ad87391a6aed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e939eba1-6ca2-4818-b289-51831172e51e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c81fabb-aec3-4ecc-b9d8-5d78e5196ff3"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1177a678-473c-427c-8b78-ef030b74abbc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc4be267-5390-424d-b825-69fe9d2977df"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08b6d861-3b45-4beb-a3c6-4d77848064d6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""posMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53127b0f-0438-4a93-a7a0-4b62bb1b74de"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""posMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // main
        m_main = asset.FindActionMap("main", throwIfNotFound: true);
        m_main_press = m_main.FindAction("press", throwIfNotFound: true);
        m_main_release = m_main.FindAction("release", throwIfNotFound: true);
        m_main_posMouse = m_main.FindAction("posMouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // main
    private readonly InputActionMap m_main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_main_press;
    private readonly InputAction m_main_release;
    private readonly InputAction m_main_posMouse;
    public struct MainActions
    {
        private @InputController m_Wrapper;
        public MainActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @press => m_Wrapper.m_main_press;
        public InputAction @release => m_Wrapper.m_main_release;
        public InputAction @posMouse => m_Wrapper.m_main_posMouse;
        public InputActionMap Get() { return m_Wrapper.m_main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @press.started -= m_Wrapper.m_MainActionsCallbackInterface.OnPress;
                @press.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnPress;
                @press.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnPress;
                @release.started -= m_Wrapper.m_MainActionsCallbackInterface.OnRelease;
                @release.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnRelease;
                @release.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnRelease;
                @posMouse.started -= m_Wrapper.m_MainActionsCallbackInterface.OnPosMouse;
                @posMouse.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnPosMouse;
                @posMouse.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnPosMouse;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @press.started += instance.OnPress;
                @press.performed += instance.OnPress;
                @press.canceled += instance.OnPress;
                @release.started += instance.OnRelease;
                @release.performed += instance.OnRelease;
                @release.canceled += instance.OnRelease;
                @posMouse.started += instance.OnPosMouse;
                @posMouse.performed += instance.OnPosMouse;
                @posMouse.canceled += instance.OnPosMouse;
            }
        }
    }
    public MainActions @main => new MainActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnPress(InputAction.CallbackContext context);
        void OnRelease(InputAction.CallbackContext context);
        void OnPosMouse(InputAction.CallbackContext context);
    }
}
